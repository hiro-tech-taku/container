#!/usr/bin/env bash
set -euo pipefail

SNMP_CONF_DIR="/etc/snmp"
TRAPD_CONF="${SNMP_CONF_DIR}/snmptrapd.conf"
GEN_CONF="${SNMP_CONF_DIR}/snmptrapd.generated.conf"

mkdir -p "${SNMP_CONF_DIR}" /var/run/snmp /var/lib/snmp

# Defaults
SNMP_COMMUNITIES=${SNMP_COMMUNITIES:-public}
FORWARD_LIST=${FORWARD_LIST:-}
LISTEN_ADDR=${LISTEN_ADDR:-0.0.0.0:162}
DISABLE_AUTH=${DISABLE_AUTH:-no}
OVERWRITE_CONFIG=${OVERWRITE_CONFIG:-yes}

# Optional behavior
AGENT_PROTO=${AGENT_PROTO:-udp}           # udp | udp4
FORWARD_PROTO=${FORWARD_PROTO:-}          # empty (no force) | udp | udp4
SNMPTRAPD_DEBUG=${SNMPTRAPD_DEBUG:-}      # e.g. -Dforward,trap
SNMPTRAPD_EXTRA_ARGS=${SNMPTRAPD_EXTRA_ARGS:-}
FORWARD_BACKEND=${FORWARD_BACKEND:-snmptrapd} # snmptrapd | fanout

# Always render a fresh config to a temp file
{
  echo "# Generated by docker-entrypoint.sh"
  if [ "${DISABLE_AUTH}" = "yes" ]; then
    echo "disableAuthorization yes"
  else
    IFS=',' read -ra comms <<< "${SNMP_COMMUNITIES}"
    for c in "${comms[@]}"; do
      c_trim=$(echo "$c" | xargs)
      [ -z "$c_trim" ] && continue
      echo "authCommunity log,execute,net ${c_trim}"
    done
  fi

  if [ -n "${FORWARD_LIST}" ]; then
    IFS=',' read -ra targets <<< "${FORWARD_LIST}"
    for t in "${targets[@]}"; do
      t_trim=$(echo "$t" | xargs)
      [ -z "$t_trim" ] && continue
      hostport=${t_trim%%|*}
      if [[ "$t_trim" == *"|"* ]]; then
        community=${t_trim#*|}
        # Prefix transport if requested and not already specified
        if [ -n "${FORWARD_PROTO}" ] && [[ "${hostport}" != udp:* && "${hostport}" != udp4:* && "${hostport}" != tcp:* ]]; then
          echo "forward ${FORWARD_PROTO}:${hostport} ${community}"
        else
          echo "forward ${hostport} ${community}"
        fi
      else
        if [ -n "${FORWARD_PROTO}" ] && [[ "${hostport}" != udp:* && "${hostport}" != udp4:* && "${hostport}" != tcp:* ]]; then
          echo "forward ${FORWARD_PROTO}:${hostport}"
        else
          echo "forward ${hostport}"
        fi
      fi
    done
  fi

  echo "agentAddress ${AGENT_PROTO}:${LISTEN_ADDR}"
} > "${GEN_CONF}"

# Decide which config to use
USE_CONF="${TRAPD_CONF}"
if [ -s "${TRAPD_CONF}" ] && [ "${OVERWRITE_CONFIG}" != "yes" ]; then
  USE_CONF="${TRAPD_CONF}"
else
  mv -f "${GEN_CONF}" "${TRAPD_CONF}"
  USE_CONF="${TRAPD_CONF}"
fi

echo "[snmpproxy] Using config: ${USE_CONF}"
cat "${USE_CONF}"

# Start backend
if [ "${FORWARD_BACKEND}" = "fanout" ]; then
  # Use Python UDP fanout instead of snmptrapd forwarding.
  # LISTEN_ADDR and FORWARD_LIST are reused.
  echo "[snmpproxy] Starting fanout backend (LISTEN_ADDR=${LISTEN_ADDR}, FORWARD_LIST=${FORWARD_LIST})"
  exec /usr/local/bin/udp-fanout.py
fi

# Ensure snmptrapd can bind low port in container (root by default)
if [ "${1:-}" = "snmptrapd" ]; then
  # Build args with optional debug/extras
  args=("$@")
  if [ -n "${SNMPTRAPD_DEBUG}" ]; then
    args+=("${SNMPTRAPD_DEBUG}")
  fi
  if [ -n "${SNMPTRAPD_EXTRA_ARGS}" ]; then
    args+=("${SNMPTRAPD_EXTRA_ARGS}")
  fi
  exec "${args[@]}" -C -c "${USE_CONF}"
else
  exec "$@"
fi
